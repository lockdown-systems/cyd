import { vi } from "vitest";
import type { ElectronAPI } from "../../preload";

export const stubElectron = (): ElectronAPI => {
  return {
    ipcRenderer: {
      send: vi.fn(),
      on: vi.fn(),
      once: vi.fn(),
      removeAllListeners: vi.fn(),
    },
    checkForUpdates: vi.fn(),
    quitAndInstallUpdate: vi.fn(),
    getVersion: vi.fn().mockResolvedValue("0.0.1"),
    getMode: vi.fn().mockResolvedValue("prod"),
    getPlatform: vi.fn().mockResolvedValue("win32"),
    getAPIURL: vi.fn().mockResolvedValue("https://api.example.com"),
    getDashURL: vi.fn().mockResolvedValue("https://dash.example.com"),
    isFeatureEnabled: vi.fn().mockResolvedValue(false),
    trackEvent: vi.fn().mockResolvedValue("tracked"),
    shouldOpenDevtools: vi.fn().mockResolvedValue(false),
    showMessage: vi.fn(),
    showError: vi.fn(),
    showQuestion: vi.fn().mockResolvedValue(true),
    showOpenDialog: vi.fn().mockResolvedValue(null),
    openURL: vi.fn(),
    loadFileInWebview: vi.fn(),
    getAccountDataPath: vi.fn().mockResolvedValue(null),
    startPowerSaveBlocker: vi.fn().mockResolvedValue(1),
    stopPowerSaveBlocker: vi.fn(),
    deleteSettingsAndRestart: vi.fn(),
    onPowerMonitorSuspend: vi.fn(),
    onPowerMonitorResume: vi.fn(),
    getImageDataURIFromFile: vi.fn().mockResolvedValue(""),
    database: {
      getConfig: vi.fn().mockResolvedValue(null),
      setConfig: vi.fn(),
      deleteConfig: vi.fn(),
      deleteConfigLike: vi.fn(),
      getErrorReport: vi.fn().mockResolvedValue(null),
      getNewErrorReports: vi.fn().mockResolvedValue([]),
      createErrorReport: vi.fn().mockResolvedValue(undefined),
      updateErrorReportSubmitted: vi.fn(),
      dismissNewErrorReports: vi.fn(),
      getAccount: vi.fn().mockResolvedValue(null),
      getAccounts: vi.fn().mockResolvedValue([]),
      createAccount: vi.fn().mockResolvedValue({
        id: 1,
        type: "X",
        sortOrder: 0,
        xAccount: null,
        blueskyAccount: null,
        facebookAccount: null,
        uuid: "uuid",
      }),
      selectAccountType: vi.fn().mockResolvedValue({
        id: 1,
        type: "X",
        sortOrder: 0,
        xAccount: null,
        blueskyAccount: null,
        facebookAccount: null,
        uuid: "uuid",
      }),
      saveAccount: vi.fn(),
      deleteAccount: vi.fn(),
    },
    archive: {
      isPageAlreadySaved: vi.fn().mockResolvedValue(false),
      savePage: vi.fn().mockResolvedValue(true),
      openFolder: vi.fn(),
      getInfo: vi.fn().mockResolvedValue(null),
    },
    X: {
      resetProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      createJobs: vi.fn().mockResolvedValue([]),
      getLastFinishedJob: vi.fn().mockResolvedValue(null),
      updateJob: vi.fn(),
      indexStart: vi.fn(),
      indexStop: vi.fn(),
      indexParseTweets: vi.fn().mockResolvedValue({ progress: 0 }),
      indexParseLikes: vi.fn().mockResolvedValue({ progress: 0 }),
      indexParseBookmarks: vi.fn().mockResolvedValue({ progress: 0 }),
      indexParseConversations: vi.fn().mockResolvedValue({ progress: 0 }),
      indexIsThereMore: vi.fn().mockResolvedValue(false),
      resetThereIsMore: vi.fn(),
      indexMessagesStart: vi.fn().mockResolvedValue({ progress: 0 }),
      indexParseMessages: vi.fn().mockResolvedValue({ progress: 0 }),
      indexConversationFinished: vi.fn().mockResolvedValue(undefined),
      archiveTweetsStart: vi.fn().mockResolvedValue({ progress: 0 }),
      archiveTweetsOutputPath: vi.fn().mockResolvedValue("/path/to/output"),
      archiveTweet: vi.fn().mockResolvedValue(undefined),
      archiveTweetCheckDate: vi.fn().mockResolvedValue(undefined),
      archiveBuild: vi.fn().mockResolvedValue(undefined),
      syncProgress: vi.fn(),
      resetRateLimitInfo: vi.fn().mockResolvedValue(undefined),
      isRateLimited: vi
        .fn()
        .mockResolvedValue({ isRateLimited: false, rateLimitReset: 0 }),
      getProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      getProgressInfo: vi.fn().mockResolvedValue({}),
      getDatabaseStats: vi.fn().mockResolvedValue({}),
      getDeleteReviewStats: vi.fn().mockResolvedValue({}),
      saveProfileImage: vi.fn().mockResolvedValue(undefined),
      getLatestResponseData: vi.fn().mockResolvedValue(null),
      deleteTweetsStart: vi.fn().mockResolvedValue({ progress: 0 }),
      deleteTweetsCountNotArchived: vi.fn().mockResolvedValue(0),
      deleteRetweetsStart: vi.fn().mockResolvedValue({ progress: 0 }),
      deleteLikesStart: vi.fn().mockResolvedValue({ progress: 0 }),
      deleteBookmarksStart: vi.fn().mockResolvedValue({ progress: 0 }),
      deleteTweet: vi.fn().mockResolvedValue(undefined),
      deleteDMsMarkAllDeleted: vi.fn().mockResolvedValue(undefined),
      deleteDMsScrollToBottom: vi.fn().mockResolvedValue(undefined),
      unzipXArchive: vi.fn().mockResolvedValue(null),
      deleteUnzippedXArchive: vi.fn().mockResolvedValue(null),
      verifyXArchive: vi.fn().mockResolvedValue(null),
      importXArchive: vi.fn().mockResolvedValue({}),
      getCookie: vi.fn().mockResolvedValue(null),
      getConfig: vi.fn().mockResolvedValue(null),
      setConfig: vi.fn().mockResolvedValue(undefined),
      deleteConfig: vi.fn().mockResolvedValue(undefined),
      deleteConfigLike: vi.fn().mockResolvedValue(undefined),
      getImageDataURI: vi.fn().mockResolvedValue(""),
      blueskyGetProfile: vi.fn().mockResolvedValue(null),
      blueskyAuthorize: vi.fn().mockResolvedValue(true),
      blueskyCallback: vi.fn().mockResolvedValue(true),
      blueskyDisconnect: vi.fn().mockResolvedValue(undefined),
      blueskyGetTweetCounts: vi.fn().mockResolvedValue({}),
      blueskyMigrateTweet: vi.fn().mockResolvedValue(true),
      blueskyDeleteMigratedTweet: vi.fn().mockResolvedValue(true),
      getMediaPath: vi.fn().mockResolvedValue("/path/to/media"),
      initArchiveOnlyMode: vi.fn().mockResolvedValue({}),
    },
    Facebook: {
      resetProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      createJobs: vi.fn().mockResolvedValue([]),
      updateJob: vi.fn(),
      archiveBuild: vi.fn().mockResolvedValue(undefined),
      syncProgress: vi.fn(),
      getProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      getCookie: vi.fn().mockResolvedValue(null),
      getProfileImageDataURI: vi.fn().mockResolvedValue(""),
      getConfig: vi.fn().mockResolvedValue(null),
      setConfig: vi.fn().mockResolvedValue(undefined),
      indexStart: vi.fn(),
      indexStop: vi.fn(),
      savePosts: vi.fn().mockResolvedValue({ progress: 0 }),
      getDatabaseStats: vi.fn().mockResolvedValue({}),
    },
  };
};
