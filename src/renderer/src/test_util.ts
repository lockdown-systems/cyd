import { vi } from "vitest";
import type { ElectronAPI } from "../../preload";

export const stubElectron = () => {
  return {
    ipcRenderer: {
      send: vi.fn(),
      on: vi.fn(),
      once: vi.fn(),
      removeAllListeners: vi.fn(),
    },
    quitAndInstallUpdate: vi.fn(),
    checkForUpdates: vi.fn(),
    getVersion: vi.fn().mockResolvedValue("0.0.1"),
    getMode: vi.fn().mockResolvedValue("prod"),
    getPlatform: vi.fn().mockResolvedValue("win32"),
    getAPIURL: vi.fn().mockResolvedValue("https://api.example.com"),
    getDashURL: vi.fn().mockResolvedValue("https://dash.example.com"),
    isFeatureEnabled: vi.fn().mockResolvedValue(false),
    trackEvent: vi.fn().mockResolvedValue("tracked"),
    shouldOpenDevtools: vi.fn().mockResolvedValue(false),
    showMessage: vi.fn(),
    showError: vi.fn(),
    showQuestion: vi.fn(),
    showOpenDialog: vi.fn(),
    openURL: vi.fn(),
    loadFileInWebview: vi.fn(),
    getAccountDataPath: vi.fn().mockResolvedValue(null),
    startPowerSaveBlocker: vi.fn().mockResolvedValue(1),
    stopPowerSaveBlocker: vi.fn(),
    deleteSettingsAndRestart: vi.fn(),
    onPowerMonitorSuspend: vi.fn(),
    onPowerMonitorResume: vi.fn(),
    getImageDataURIFromFile: vi.fn().mockResolvedValue(""),
    archive: {
      importArchive: vi.fn(),
      getArchiveInfo: vi.fn().mockResolvedValue(null),
      isPageAlreadySaved: vi.fn().mockResolvedValue(false),
      savePage: vi.fn().mockResolvedValue(true),
      openFolder: vi.fn(),
      getInfo: vi.fn().mockResolvedValue(null),
    },
    database: {
      getConfig: vi.fn().mockResolvedValue(null),
      setConfig: vi.fn(),
      deleteConfig: vi.fn(),
      deleteConfigLike: vi.fn(),
      saveAccount: vi.fn(),
      getErrorReport: vi.fn().mockResolvedValue(null),
      getNewErrorReports: vi.fn().mockResolvedValue([]),
      createErrorReport: vi.fn().mockResolvedValue(undefined),
      updateErrorReportSubmitted: vi.fn(),
      dismissNewErrorReports: vi.fn(),
      getAccount: vi.fn().mockResolvedValue(null),
      getAccounts: vi.fn().mockResolvedValue([]),
      createAccount: vi.fn().mockResolvedValue({
        id: 1,
        type: "X",
        sortOrder: 0,
        xAccount: null,
        blueskyAccount: null,
        uuid: "uuid",
      }),
      selectAccountType: vi.fn().mockResolvedValue({
        id: 1,
        type: "X",
        sortOrder: 0,
        xAccount: null,
        blueskyAccount: null,
        uuid: "uuid",
      }),
      updateAccount: vi.fn(),
      deleteAccount: vi.fn(),
      getFacebookAccount: vi.fn().mockResolvedValue(null),
      createFacebookAccount: vi.fn().mockResolvedValue({
        id: 1,
        accountId: 1,
        name: "Test User",
        profileImageDataURI: "",
        settingsJSON: "{}",
        createdAt: new Date(),
        updatedAt: new Date(),
      }),
      updateFacebookAccount: vi.fn(),
      deleteFacebookAccount: vi.fn(),
      getXAccount: vi.fn().mockResolvedValue(null),
      createXAccount: vi.fn().mockResolvedValue({
        id: 1,
        accountId: 1,
        username: "testuser",
        displayName: "Test User",
        profileImageDataURI: "",
        settingsJSON: "{}",
        createdAt: new Date(),
        updatedAt: new Date(),
      }),
      updateXAccount: vi.fn(),
      deleteXAccount: vi.fn(),
      getBlueskyAccount: vi.fn().mockResolvedValue(null),
      createBlueskyAccount: vi.fn().mockResolvedValue({
        id: 1,
        accountId: 1,
        handle: "testuser.bsky.social",
        displayName: "Test User",
        profileImageDataURI: "",
        settingsJSON: "{}",
        createdAt: new Date(),
        updatedAt: new Date(),
      }),
      updateBlueskyAccount: vi.fn(),
      deleteBlueskyAccount: vi.fn(),
    },
    Facebook: {
      startImport: vi.fn(),
      startDeleteData: vi.fn(),
      buildArchive: vi.fn(),
      stopJob: vi.fn(),
      pauseJob: vi.fn(),
      resumeJob: vi.fn(),
      getStatus: vi.fn().mockResolvedValue({ status: "idle" }),
      getProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      openDeveloperTools: vi.fn(),
      getAutomationErrors: vi.fn().mockResolvedValue([]),
      getLastImportOrBuild: vi.fn().mockResolvedValue(null),
      getFinishedJobs: vi.fn().mockResolvedValue([]),
      previewTweet: vi.fn(),
    },
    X: {
      startImport: vi.fn(),
      startDeleteData: vi.fn(),
      buildArchive: vi.fn(),
      stopJob: vi.fn(),
      pauseJob: vi.fn(),
      resumeJob: vi.fn(),
      getStatus: vi.fn().mockResolvedValue({ status: "idle" }),
      getProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      openDeveloperTools: vi.fn(),
      getAutomationErrors: vi.fn().mockResolvedValue([]),
      getLastImportOrBuild: vi.fn().mockResolvedValue(null),
      getFinishedJobs: vi.fn().mockResolvedValue([]),
      previewTweet: vi.fn(),
      migrateToBluesky: vi.fn(),
      resetProgress: vi.fn().mockResolvedValue({ progress: 0 }),
      createJobs: vi.fn().mockResolvedValue([]),
      getLastFinishedJob: vi.fn().mockResolvedValue(null),
      updateJob: vi.fn(),
    },
  } as unknown as ElectronAPI;
};
